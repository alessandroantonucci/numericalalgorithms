# -*- coding: utf-8 -*-
"""Esercitazione0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wdmaNb4HCMApbid3AyYNRQYYrHXkFLcV
"""

import numpy as np
A = np.array(
    [[2,-1,3,-1,2],
    [0,3,1,-1,1],
    [0,0,1,1,-2],
    [0,0,0,4,1],
    [0,0,0,0,5]])
b = np.array([1,-1,2,1,1])
x = np.array([0.,0.,0.,0.,0.])
n = len(A)

x[4] = b[4]/A[4][4]
tmp = A[3][4]*x[4]
x[3] = (b[3]-tmp)/A[3][3]
tmp = A[2][4]*x[4] + A[2][3]*x[3]
x[2] = (b[2]-tmp)/A[2][2]
tmp = A[1][4]*x[4] + A[1][3]*x[3] + A[1][2]*x[2]
x[1] = (b[1]-tmp)/A[1][1]
tmp = A[0][4]*x[4] + A[0][3]*x[3] + A[0][2]*x[2] + A[0][1]*x[1]
x[0] = (b[0]-tmp)/A[0][0]

print(x)

# SISTEMI DIAGONALI (soluzione lineare)
for i in range(n):
  x[i] = b[i]/A[i][i]

# SISTEMI TRIANGOLARI (soluzione quadratica)
for i in range(n-1,-1,-1):
  tmp = 0
  for j in range(n-1-i):
    tmp += A[i][n-j-1] * x[n-j-1]
  x[i] = (b[i] - tmp)/A[i][i]
print(x)
# SISTEMI QUALUNQUE (soluzione cubica)
# Algoritmo di Gauss

import numpy as np


A = np.array([[7,0,0],[0,2,0],[0,0,5]])
b = np.array([5,-3,10])
x = np.array([0.,0.,0.])
d = len(A)
print(x)

import numpy as np

A = np.array([[2,-1,3,-1,2],
              [0,3,1,-1,1],
              [0,0,1,1,-2],
              [0,0,0,4,1],
              [0,0,0,0,5]])
b = np.array([1,-1,2,1,1])
x = np.array([0.,0.,0.,0.,0.])
d = len(A)

# DIAGO (Lineare) O(n)
for i in range(d-1,-1,-1): # Loop discendente
  x[i] = (b[i]-tmp)/A[i][i]

# TRIANG (Quadratico) O(n^2)
for i in range(d-1,-1,-1): # Loop discendente
  tmp = 0
  for j in range(d-1-i): #... # al primo giro non fa nulla, al secondo fa una, al 
    tmp += A[i][d-1-j]*x[d-1-j]
  x[i] = (b[i]-tmp)/A[i][i]

# Cubico O(n^3)

print(x)

#  print(i)



import numpy as np
a = np.array([[1,1,1],[0,1,1],[1,0,1]])
b = np.array([[1,-1,0],[1,0,-1],[-1,1,1]])
print(np.dot(a,b))
#b = np.array([[10,2,3],[4,5,6],[7,8,9]])
#print(a.shape)
#print(a[0][2])
#v = np.array([1, 2, 3, 21])
#k = 10
#print(k*v)
#v1 = np.array([1, 2, 3, 8])
#v2 = np.array([10, 31, 30, 80])
#print(np.dot(v1,v2))
#a = 1*10+2*31+3*30+8*80
#print(a)

import numpy as np0
A = np.array([[1, 1, 1],[0,1,1],[1,0,1]])
B = np.array([[1, -1, 0],[1,0,-1],[-1,1,1]])
print(np.dot(B,A))
print(np.linalg.inv(A))

# Senza NUMPY
v1 = [1, 2, 3]
v2 = [4, 5, 6]
v3 = [0, 0, 0]
for i in range(len(v1)):
  v3[i] = v1[i]+v2[i]
print(v3)

# Con NUMPY
import numpy as np
v1 = np.array([1, 2, 3])
v2 = np.array([4, 5, 6])
v3 = v1 + v2
print(v3)

n = 5
m = [[0. for j in range(n)] for i in range(n)]

output = ''

for i in range(n):
  for j in range(n):
    if i==j:
      m[i][j] = 1.0
    else:
      if i < j:
        m[i][j] = 2.0

#print(np.array(m))

n= 3
m1 = [[1,2,3],[4,5,6],[7,8,9]]
m2 = [[10,20,30],[40,50,60],[70,80,90]]
m3 = [[0. for j in range(n)] for i in range(n)]

for i in range(n):
  for j in range(n):
    m3[i][j] = m1[i][j] + m2[i][j]

#print(np.array(m3))
#print(m)

def swap(v,i1,i2):
  tmp = v[i1]
  v[i1] = v[i2]
  v[i2] = tmp
  return v

v = [1, 2 ,3 ,4]
print(v)
v = swap(v,0,2)
v = swap(v,2,3)
print(v)
print('---')
v = [1, 2 ,3 ,4]
print(v)
v = swap(v,2,3)
v = swap(v,0,2)
print(v)

m1 = np.zeros([3,3])
print(m1)

"""<h1>Esercizi</h1>
<ul>
<li>Crea e stampa a video una matrice $n \times n$ con $n$ parametro specificato dall'utente, che ha tutti uno sulla diagonale, tutti zero sotto la diagonale, tutti due sopra la diagonale.</li>
<li>Crea una funzione che somma dua matrici (quadrate ed entrambe di dimensione n)</li>
<li>Crea una funzione di <i>swap righe</i> che scambia l'$i_1$-esima riga con la $i_2$-esima. Crea anche uno <i>swap colonne</i> che scambia la $j_1$-esima colonna con la $j_2$-esima.</li>
<li>Usa le funzioni di swap per mostrare che il risultato di uno swap multiplo non Ã¨ indipendente dall'ordine in cui questi swap sono eseguiti.</li>
<li>Crea una funzione che moltiplica la $j$-esima riga di una matrice per una costante $c$</li>
<li>Crea una funzione che somma la $j_1$-esima riga alla $j_2$-esima riga e scrive il risultato nella $j_1$-esima riga.</li>
<li>Usa le due funzioni per sottrarre alla prima riga di una matrice la seconda riga.</li>
</ul>





"""

n = 10

#E1
m = [[0.0 for j in range(n)] for i in range(n)]
for i in range(n):
  for j in range(n):
    if i == j:
      m[i][j] = 1.0
    else:
      if i < j:
        m[i][j] = 2.0

print(np.array(m))

n=3
# E2
m = [[0.0 for j in range(n)] for i in range(n)]
m1 = [[1,2,3],[4,5,6],[7,8,9]]
m2 = [[10,20,30],[40,50,60],[70,80,90]]
for i in range(n):
  for j in range(n):
    m[i][j] = m1[i][j]+m2[i][j]

#print(np.array(m))

def swapper(m, i1, i2):
  n = len(m)
  for j in range(n):
    tmp = m[i1][j]
    m[i1][j] = m[i2][j]
    m[i2][j] = tmp
  return m

m3 = [[1,2,3],[4,5,6],[7,8,9]]
print(np.array(swapper(m3,0,2)))